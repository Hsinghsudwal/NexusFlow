name: CD Pipeline

on:
  workflow_run:
    workflows: ["CI Pipeline"]
    branches: [main]
    types:
      - completed

jobs:
  deploy-staging:
    runs-on: ubuntu-latest
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up Kubernetes tools
      uses: yokawasa/action-setup-kube-tools@v0.9.2
      with:
        kubectl: '1.24.0'
        kustomize: '4.5.4'
        helmv3: '3.9.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name mlops-staging-cluster --region us-west-2
        
    - name: Get latest image tags
      id: get-images
      run: |
        API_IMAGE=$(aws ecr describe-images --repository-name enterprise-mlops-api --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        TRAINING_IMAGE=$(aws ecr describe-images --repository-name enterprise-mlops-training --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        echo "::set-output name=api_image_tag::$API_IMAGE"
        echo "::set-output name=training_image_tag::$TRAINING_IMAGE"
        
    - name: Deploy API to Staging
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: enterprise-mlops-api
        IMAGE_TAG: ${{ steps.get-images.outputs.api_image_tag }}
      run: |
        # Replace placeholders in the Kubernetes manifests
        sed -i "s|\${ECR_REPOSITORY_URI}|$ECR_REGISTRY/$ECR_REPOSITORY|g" infrastructure/kubernetes/manifests/api-deployment.yaml
        sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" infrastructure/kubernetes/manifests/api-deployment.yaml
        
        # Apply the Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/manifests/api-deployment.yaml
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mlops-api -n default
        
  approve-production:
    runs-on: ubuntu-latest
    needs: deploy-staging
    environment: production-approval
    steps:
    - name: Approval step
      run: echo "Deployment to production has been approved"
  
  deploy-production:
    runs-on: ubuntu-latest
    needs: approve-production
    environment: production
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
      
    - name: Set up Kubernetes tools
      uses: yokawasa/action-setup-kube-tools@v0.9.2
      with:
        kubectl: '1.24.0'
        kustomize: '4.5.4'
        helmv3: '3.9.0'
        
    - name: Update kubeconfig
      run: |
        aws eks update-kubeconfig --name mlops-production-cluster --region us-west-2
        
    - name: Get latest image tags
      id: get-images
      run: |
        API_IMAGE=$(aws ecr describe-images --repository-name enterprise-mlops-api --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        TRAINING_IMAGE=$(aws ecr describe-images --repository-name enterprise-mlops-training --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' --output text)
        echo "::set-output name=api_image_tag::$API_IMAGE"
        echo "::set-output name=training_image_tag::$TRAINING_IMAGE"
        
    - name: Deploy API to Production
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: enterprise-mlops-api
        IMAGE_TAG: ${{ steps.get-images.outputs.api_image_tag }}
      run: |
        # Replace placeholders in the Kubernetes manifests
        sed -i "s|\${ECR_REPOSITORY_URI}|$ECR_REGISTRY/$ECR_REPOSITORY|g" infrastructure/kubernetes/manifests/api-deployment.yaml
        sed -i "s|\${IMAGE_TAG}|$IMAGE_TAG|g" infrastructure/kubernetes/manifests/api-deployment.yaml
        
        # Apply the Kubernetes manifests
        kubectl apply -f infrastructure/kubernetes/manifests/api-deployment.yaml
        
    - name: Verify deployment
      run: |
        kubectl rollout status deployment/mlops-api -n default
        
    - name: Perform post-deployment tests
      run: |
        # Wait for the service to be fully available
        sleep 30
        
        # Get the service URL
        SERVICE_URL=$(kubectl get ingress mlops-api-ingress -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
        
        # Test the health endpoint
        curl -f http://$SERVICE_URL/health || exit 1
        
        echo "Deployment to production successful"
