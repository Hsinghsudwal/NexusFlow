name: CD Development Deployment

on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  prepare-deployment:
    name: Prepare Dev Deployment
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Set up environment variables
        run: |
          echo "ECR_REPOSITORY=${{ steps.login-ecr.outputs.registry }}/mlops-dev" >> $GITHUB_ENV
          echo "IMAGE_TAG=${GITHUB_SHA::8}" >> $GITHUB_ENV
  
  build-serving-image:
    name: Build and Push Serving Image
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build and push serving image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/inference/Dockerfile
          push: true
          tags: ${{ env.ECR_REPOSITORY }}/serving:${{ env.IMAGE_TAG }}
          build-args: |
            ENVIRONMENT=dev
  
  update-model-registry:
    name: Update Model Registry
    runs-on: ubuntu-latest
    needs: [prepare-deployment]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install mlflow boto3
          pip install -r requirements.txt
      
      - name: Update model in registry
        run: |
          python -m src.models.registry.promotion \
            --environment dev \
            --model-name ${{ github.repository }} \
            --run-id ${{ github.run_id }} \
            --commit-sha ${{ github.sha }}
        env:
          MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  
  deploy-to-kubernetes:
    name: Deploy to Development Kubernetes
    runs-on: ubuntu-latest
    needs: [build-serving-image, update-model-registry]
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Set kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBECONFIG }}
          context: ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Deploy to kubernetes
        run: |
          # Update the deployment manifests with the new image
          sed -i "s|image:.*|image: ${{ env.ECR_REPOSITORY }}/serving:${{ env.IMAGE_TAG }}|g" infra/kubernetes/serving/deployment.yaml
          
          # Apply the kubernetes manifests
          kubectl apply -f infra/kubernetes/serving/deployment.yaml -n dev
      
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/mlops-model-serving -n dev
  
  post-deployment-tests:
    name: Post-Deployment Tests
    runs-on: ubuntu-latest
    needs: [deploy-to-kubernetes]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests
          pip install -r requirements.txt
      
      - name: Run post-deployment tests
        run: pytest tests/e2e/api_tests.py -v
        env:
          API_ENDPOINT: ${{ secrets.DEV_API_ENDPOINT }}
  
  setup-monitoring:
    name: Set Up Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-to-kubernetes]
    steps:
      - uses: actions/checkout@v3
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name ${{ secrets.EKS_CLUSTER_NAME }} --region ${{ secrets.AWS_REGION }}
      
      - name: Set kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ env.KUBECONFIG }}
          context: ${{ secrets.EKS_CLUSTER_NAME }}
      
      - name: Deploy monitoring stack
        run: |
          kubectl apply -f infra/kubernetes/monitoring/prometheus.yaml -n monitoring
          kubectl apply -f infra/kubernetes/monitoring/grafana.yaml -n monitoring
      
      - name: Configure alerting
        run: |
          python -m src.monitoring.alerting.configure_alerts \
            --environment dev \
            --deployment-id ${{ github.run_id }}
        env:
          PROMETHEUS_URL: ${{ secrets.PROMETHEUS_URL }}
          ALERTMANAGER_URL: ${{ secrets.ALERTMANAGER_URL }}
