# .github/workflows/ml-pipeline.yml - GitHub Actions workflow for ML pipelines

name: ML Model Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'config/**'
      - 'data/**/*.py'
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly retraining
  workflow_dispatch:
    inputs:
      retrain_model:
        description: 'Force model retraining'
        required: false
        default: 'false'
      deploy_model:
        description: 'Deploy model after training'
        required: false
        default: 'false'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
    
    - name: Run linting
      run: |
        flake8 src/ tests/
        black --check src/ tests/
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ --cov=src --cov-report=xml
    
    - name: Upload coverage report
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
  
  data_validation:
    name: Validate Data
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download latest data
      run: |
        python src/data/download_data.py
    
    - name: Run data validation
      run: |
        python src/data/validate_data.py
        
    - name: Archive data validation report
      uses: actions/upload-artifact@v3
      with:
        name: data-validation-report
        path: reports/data_validation/
  
  train_model:
    name: Train Model
    needs: data_validation
    runs-on: ubuntu-latest
    if: success() || github.event.inputs.retrain_model == 'true'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Download data validation report
      uses: actions/download-artifact@v3
      with:
        name: data-validation-report
        path: reports/data_validation/
    
    - name: Set up MLflow tracking server
      run: |
        docker-compose up -d mlflow
    
    - name: Train model
      run: |
        python src/models/train_model.py
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MODEL_CONFIG: config/model/config.yaml
    
    - name: Evaluate model
      run: |
        python src/models/evaluate_model.py
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
    
    - name: Archive model artifacts
      uses: actions/upload-artifact@v3
      with:
        name: model-artifacts
        path: |
          models/
          reports/figures/
          reports/metrics.json
  
  model_approval:
    name: Model Approval
    needs: train_model
    runs-on: ubuntu-latest
    if: success() && github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: model-artifacts
        path: ./
    
    - name: Create model approval comment
      uses: actions/github-script@v6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const metrics = JSON.parse(fs.readFileSync('reports/metrics.json', 'utf8'));
          
          const comment = `## Model Training Results
          
          ### Model Metrics
          - **Accuracy**: ${metrics.accuracy.toFixed(4)}
          - **Precision**: ${metrics.precision.toFixed(4)}
          - **Recall**: ${metrics.recall.toFixed(4)}
          - **F1 Score**: ${metrics.f1.toFixed(4)}
          
          ### Model Registry
          - **Run ID**: ${metrics.run_id}
          - **Model Name**: ${metrics.model_name}
          
          ### Approval
          Please review the metrics and approve or reject this model for staging.
          
          - To approve: Comment \`/approve-model\`
          - To reject: Comment \`/reject-model\``;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
  
  deploy_staging:
    name: Deploy to Staging
    needs: [train_model, model_approval]
    if: |
      success() && (
        github.event.inputs.deploy_model == 'true' || 
        github.event_name == 'schedule' || 
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ubuntu-latest
    environment: staging
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Download model artifacts
      uses: actions/download-artifact@v3
      with:
        name: model-artifacts
        path: ./
    
    - name: Deploy model to staging
      run: |
        python src/deployment/deploy_model.py --environment staging
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MODEL_REGISTRY_PATH: ${{ secrets.MODEL_REGISTRY_PATH }}
    
    - name: Update model endpoint
      run: |
        aws lambda update-function-code \
          --function-name model-serving-staging \
          --s3-bucket ${{ secrets.DEPLOYMENT_BUCKET }} \
          --s3-key ${{ secrets.DEPLOYMENT_KEY }}
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ --endpoint https://api-staging.example.com/predict
    
    - name: Send deployment notification
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: mlops-deployments
        SLACK_MESSAGE: "ðŸš€ Model successfully deployed to staging environment"
  
  deploy_production:
    name: Deploy to Production
    needs: deploy_staging
    if: |
      success() && (
        github.event.inputs.deploy_model == 'true' ||
        github.event_name == 'workflow_dispatch'
      )
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-west-2
    
    - name: Deploy model to production
      run: |
        python src/deployment/deploy_model.py --environment production
      env:
        MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}
        MODEL_REGISTRY_PATH: ${{ secrets.MODEL_REGISTRY_PATH }}
    
    - name: Update model endpoint (blue-green deployment)
      run: |
        # Create new "green" deployment
        aws lambda create-alias \
          --function-name model-serving \
          --name green \
          --function-version $LATEST
        
        # Run canary test to verify green deployment
        pytest tests/canary/ --endpoint https://api-green.example.com/predict
        
        # Switch traffic to new deployment
        aws lambda update-alias \
          --function-name model-serving \
          --name production \
          --function-version $LATEST
    
    - name: Send deployment notification
      if: success()
      uses: rtCamp/action-slack-notify@v2
      env:
        SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
        SLACK_CHANNEL: mlops-deployments
        SLACK_MESSAGE: "ðŸš€ Model successfully deployed to production environment"
