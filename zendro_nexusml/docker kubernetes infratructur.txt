from pipelines.training_pipeline import TrainingPipeline
from pipelines.experiment_training import ExperimentPipeline

import prefect
from prefect import task, flow
from prefect.infrastructure.docker import DockerEnvironment

@task(name="training")
def training_step_1():
    # Data
    path = "data/credit.csv"
    
    # Create an instance of the pipeline and run it
    pipeline = TrainingPipeline(path)
    outputs = pipeline.run_pipeline()
    
    return outputs

@task(name="experiment")
def experiment_step_2():
    # Create an instance of the experiment pipeline
    ex_pipe = ExperimentPipeline()
    result = ex_pipe.experiment_pipeline()
    
    # If re-training is needed, call the training step
    if result == "Need Re-training":
        print("Model performance is below threshold. Re-training needed.")
        outputs = training_step_1()
        experiment_step_2()

@flow(name="flow", log_prints=True)
def main():
    """
    Main flow that trains the model, evaluates, and handles re-training if needed.
    """
    training_step_1()
    experiment_step_2()

# Define Docker environment for the deployment
docker_env = DockerEnvironment(
    image="python:3.9",  # You can customize this Docker image
    label="ml-credit-card-risk",  # Optional: Label for your environment
    image_pull_policy="Always",  # Image pull policy (can be "Always", "IfNotPresent")
    env={"PIP_INDEX_URL": "https://pypi.org/simple"},  # Optional: Any environment variables to pass
    volumes=["/host/path:/container/path"],  # Optional: Mounts for the container
)

# Deploy the flow using the docker environment
main.deploy(
    name="ml_credit_card_risk",  # Name of the deployment
    infrastructure=docker_env,   # Docker environment for execution
    cron="0 * * * *",            # Cron schedule for running the flow (every hour in this case)
    tags=["ml", "credit-card-risk"],  # Optional: Tags for better flow management
)
