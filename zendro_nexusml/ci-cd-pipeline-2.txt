name: MLOps CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    - cron: '0 0 * * 0'  # Weekly retraining
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      
      - name: Lint with flake8
        run: |
          flake8 src tests
      
      - name: Type check with mypy
        run: |
          mypy src
      
      - name: Test with pytest
        run: |
          pytest tests/unit

  integration-tests:
    needs: lint-and-test
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: mlops_test
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: test_db
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
      
      - name: Run integration tests
        run: |
          pytest tests/integration
        env:
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: mlops_test
          DB_PASSWORD: test_password
          DB_NAME: test_db

  build-images:
    needs: integration-tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        image: [api, training, monitoring, data-pipeline]
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ghcr.io/${{ github.repository }}/${{ matrix.image }}
          tags: |
            type=sha
            type=ref,event=branch
            type=ref,event=tag
      
      - name: Build and push
        uses: docker/build-push-action@v4
        with:
          context: .
          file: docker/Dockerfile.${{ matrix.image }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-dev:
    needs: build-images
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/develop') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'dev')
    environment: dev
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '4.5.7'
      
      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Update kustomization.yaml with new image tags
        run: |
          cd k8s/overlays/dev
          kustomize edit set image ghcr.io/user/churn-api:tag=ghcr.io/${{ github.repository }}/api:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-training:tag=ghcr.io/${{ github.repository }}/training:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-monitoring:tag=ghcr.io/${{ github.repository }}/monitoring:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-data-pipeline:tag=ghcr.io/${{ github.repository }}/data-pipeline:sha-${{ github.sha }}
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k k8s/overlays/dev
          kubectl rollout status deployment -n mlops-dev churn-api
      
      - name: Run smoke test
        run: |
          API_URL=$(kubectl get svc -n mlops-dev churn-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl --fail http://$API_URL:8000/health || exit 1

  deploy-staging:
    needs: deploy-dev
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '4.5.7'
      
      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Update kustomization.yaml with new image tags
        run: |
          cd k8s/overlays/staging
          kustomize edit set image ghcr.io/user/churn-api:tag=ghcr.io/${{ github.repository }}/api:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-training:tag=ghcr.io/${{ github.repository }}/training:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-monitoring:tag=ghcr.io/${{ github.repository }}/monitoring:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-data-pipeline:tag=ghcr.io/${{ github.repository }}/data-pipeline:sha-${{ github.sha }}
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k k8s/overlays/staging
          kubectl rollout status deployment -n mlops-staging churn-api
      
      - name: Run integration tests
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements/dev.txt
          pytest tests/e2e --env=staging

  deploy-production:
    needs: deploy-staging
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'prod'
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
      
      - name: Setup Kustomize
        uses: imranismail/setup-kustomize@v2
        with:
          kustomize-version: '4.5.7'
      
      - name: Configure Kubernetes context
        uses: azure/k8s-set-context@v3
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBECONFIG }}
      
      - name: Update kustomization.yaml with new image tags
        run: |
          cd k8s/overlays/prod
          kustomize edit set image ghcr.io/user/churn-api:tag=ghcr.io/${{ github.repository }}/api:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-training:tag=ghcr.io/${{ github.repository }}/training:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-monitoring:tag=ghcr.io/${{ github.repository }}/monitoring:sha-${{ github.sha }}
          kustomize edit set image ghcr.io/user/churn-data-pipeline:tag=ghcr.io/${{ github.repository }}/data-pipeline:sha-${{ github.sha }}
      
      - name: Deploy to Kubernetes
        run: |
          kubectl apply -k k8s/overlays/prod
          kubectl rollout status deployment -n mlops-prod churn-api
      
      - name: Run smoke test
        run: |
          API_URL=$(kubectl get svc -n mlops-prod churn-api-service -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          curl --fail http://$API_URL:8000/health || exit 1

  run-training-pipeline:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'workflow_dispatch' && contains(github.event.inputs.environment, 'prod'))
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
      
      - name: Install Kubeflow Pipelines SDK
        run: |
          pip install kfp==1.8.16
      
      - name: Compile and Run Pipeline
        run: |
          cd kubeflow_pipelines
          python pipeline_definition.py
          python -c "
          import kfp
          client = kfp.Client(host='${{ secrets.KUBEFLOW_ENDPOINT }}')
          client.create_run_from_pipeline_package(
              'churn_pipeline.yaml',
              arguments={
                  'data_config_path': '/config/data.yaml',
                  'model_config_path': '/config/model.yaml',
                  'evaluation_config_path': '/config/evaluation.yaml',
                  'deployment_config_path': '/config/deployment.yaml'
              },
              experiment_name='Churn Prediction'
          )
          "
