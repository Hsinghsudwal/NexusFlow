version: '3.8'

services:
  # PostgreSQL for customer data
  postgres:
    image: postgres:14
    container_name: customer-churn-postgres
    environment:
      POSTGRES_USER: mlops
      POSTGRES_PASSWORD: mlopspassword
      POSTGRES_DB: customer_data
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - mlops-network

  # MinIO for S3-compatible storage
  minio:
    image: minio/minio
    container_name: customer-churn-minio
    environment:
      MINIO_ROOT_USER: minio
      MINIO_ROOT_PASSWORD: minio123
    ports:
      - "9000:9000"
      - "9001:9001"
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - mlops-network

  # LocalStack for AWS services emulation
  localstack:
    image: localstack/localstack
    container_name: customer-churn-localstack
    ports:
      - "4566:4566"
    environment:
      - SERVICES=s3,lambda,sqs
      - DEBUG=1
      - DATA_DIR=/tmp/localstack/data
    volumes:
      - localstack_data:/tmp/localstack
      - ./local/localstack:/docker-entrypoint-initaws.d
    networks:
      - mlops-network

  # MLflow for experiment tracking
  mlflow:
    build:
      context: ./docker/mlflow
      dockerfile: Dockerfile
    container_name: customer-churn-mlflow
    depends_on:
      - postgres
      - minio
    environment:
      - MLFLOW_S3_ENDPOINT_URL=http://minio:9000
      - AWS_ACCESS_KEY_ID=minio
      - AWS_SECRET_ACCESS_KEY=minio123
      - MLFLOW_TRACKING_URI=postgresql://mlops:mlopspassword@postgres:5432/mlflow
    ports:
      - "5000:5000"
    networks:
      - mlops-network

  # Jupyter notebook for development
  jupyter:
    build:
      context: ./docker/notebook
      dockerfile: Dockerfile
    container_name: customer-churn-jupyter
    volumes:
      - ./notebooks:/home/jovyan/notebooks
      - ./data:/home/jovyan/data
      - ./src:/home/jovyan/src
    ports:
      - "8888:8888"
    depends_on:
      - postgres
      - minio
      - mlflow
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_USER=mlops
      - POSTGRES_PASSWORD=mlopspassword
      - POSTGRES_DB=customer_data
      - MLFLOW_TRACKING_URI=http://mlflow:5000
      - MINIO_HOST=minio
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=minio123
    networks:
      - mlops-network

  # Feature store
  feast:
    build:
      context: ./docker/feast
      dockerfile: Dockerfile
    container_name: customer-churn-feast
    volumes:
      - ./feature_store:/opt/feature_store
    ports:
      - "6566:6566"
    depends_on:
      - postgres
      - redis
    networks:
      - mlops-network

  # Redis for online feature store
  redis:
    image: redis:6
    container_name: customer-churn-redis
    ports:
      - "6379:6379"
    networks:
      - mlops-network

  # Prometheus for metrics
  prometheus:
    image: prom/prometheus
    container_name: customer-churn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./local/prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    networks:
      - mlops-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana
    container_name: customer-churn-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - ./local/grafana/provisioning:/etc/grafana/provisioning
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - mlops-network

volumes:
  postgres_data:
  minio_data:
  localstack_data:
  prometheus_data:
  grafana_data:

networks:
  mlops-network:
    driver: bridge



services:
  localstack:
    container_name: localstack
    image: localstack/localstack:latest
    ports:
      - "4566:4566"            # LocalStack Gateway
      - "4510-4559:4510-4559"  # External services port range
    environment:
      - DEBUG=${DEBUG-}
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LAMBDA_EXECUTOR=${LAMBDA_EXECUTOR-}
      - LOCALSTACK_API_KEY=${LOCALSTACK_API_KEY-}  # Optional, for LocalStack Pro
      - PERSIST_ALL=true       # Persist all data between container restarts
      - DEFAULT_REGION=us-east-1
      - SERVICES=s3,lambda,sqs,events,cloudwatch,iam,ssm,secretsmanager
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
