import os
import pickle
import shutil
import logging
from pathlib import Path

class ArtifactManager:
    def __init__(self, artifact_dir="artifacts"):
        # Define the base directory where artifacts will be stored
        self.artifact_dir = Path(artifact_dir)
        self.artifact_dir.mkdir(parents=True, exist_ok=True)
        logging.info(f"ArtifactManager initialized with directory: {self.artifact_dir}")

    def save(self, artifact_name, artifact_obj):
        """
        Save an artifact (model, dataset, etc.) to disk.
        Args:
            artifact_name (str): The name of the artifact to be saved.
            artifact_obj: The artifact object (model, dataset, etc.) to be saved.
        """
        artifact_path = self.artifact_dir / artifact_name
        try:
            with open(artifact_path, 'wb') as f:
                pickle.dump(artifact_obj, f)
            logging.info(f"Artifact '{artifact_name}' saved at {artifact_path}")
        except Exception as e:
            logging.error(f"Error saving artifact '{artifact_name}': {e}")
            raise

    def load(self, artifact_name):
        """
        Load an artifact (model, dataset, etc.) from disk.
        Args:
            artifact_name (str): The name of the artifact to be loaded.
        Returns:
            The loaded artifact object.
        """
        artifact_path = self.artifact_dir / artifact_name
        if not artifact_path.exists():
            logging.error(f"Artifact '{artifact_name}' not found at {artifact_path}")
            raise FileNotFoundError(f"Artifact '{artifact_name}' not found at {artifact_path}")
        
        try:
            with open(artifact_path, 'rb') as f:
                artifact_obj = pickle.load(f)
            logging.info(f"Artifact '{artifact_name}' loaded from {artifact_path}")
            return artifact_obj
        except Exception as e:
            logging.error(f"Error loading artifact '{artifact_name}': {e}")
            raise

    def list_artifacts(self):
        """
        List all the saved artifacts in the artifact directory.
        Returns:
            List of artifact names (filenames).
        """
        artifact_list = [f.name for f in self.artifact_dir.iterdir() if f.is_file()]
        logging.info(f"Artifacts available: {artifact_list}")
        return artifact_list

    def delete(self, artifact_name):
        """
        Delete an artifact.
        Args:
            artifact_name (str): The name of the artifact to be deleted.
        """
        artifact_path = self.artifact_dir / artifact_name
        if artifact_path.exists():
            try:
                artifact_path.unlink()  # Delete the artifact
                logging.info(f"Artifact '{artifact_name}' deleted.")
            except Exception as e:
                logging.error(f"Error deleting artifact '{artifact_name}': {e}")
                raise
        else:
            logging.error(f"Artifact '{artifact_name}' not found, cannot delete.")
            raise FileNotFoundError(f"Artifact '{artifact_name}' not found to delete.")

    def clear_all_artifacts(self):
        """
        Clear all artifacts stored in the artifact directory.
        """
        try:
            for artifact in self.artifact_dir.iterdir():
                if artifact.is_file():
                    artifact.unlink()
            logging.info("All artifacts cleared.")
        except Exception as e:
            logging.error(f"Error clearing artifacts: {e}")
            raise

# Example Usage:
if __name__ == "__main__":
    # Initialize ArtifactManager
    artifact_manager = ArtifactManager()

    # Example artifact (a simple Python dictionary)
    sample_model = {"model_type": "RandomForest", "version": 1.0, "parameters": {"n_estimators": 100}}

    # Save the artifact
    artifact_manager.save("random_forest_model.pkl", sample_model)

    # List saved artifacts
    artifact_manager.list_artifacts()

    # Load the artifact
    loaded_model = artifact_manager.load("random_forest_model.pkl")
    print("Loaded Model:", loaded_model)

    # Delete the artifact
    artifact_manager.delete("random_forest_model.pkl")

    # Clear all artifacts
    artifact_manager.clear_all_artifacts()
